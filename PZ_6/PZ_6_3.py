# Вариант № 28
# Дано множество A из N точек (N > 2, точки заданы своими координатами x, у). Найти
# наименьший периметр треугольника, вершины которого принадлежат различным
# точкам множества A, и сами эти точки (точки выводятся в том же порядке, в котором
# они перечислены при задании множества A)

from random import randint
from math import sqrt


# функция для нахождения расстояния между точками
def r(point1, point2):
    return sqrt((point2[0] - point1[0]) ** 2 + (point2[1] - point1[1]) ** 2)


n = int(input('n > 2: '))
my_list = []

# создаем лист с кортежами координат x и y
for i in range(n):
    xy = (randint(-100, 100), randint(-100, 100))
    if xy not in my_list:
        my_list.append(xy)

# переменные для минимального периметра и минимальных точек
min_p = 99999
min_1 = tuple()
min_2 = tuple()
min_3 = tuple()

# тремя циклами сравниваем периметр треугольника с вершинами в каждом наборе точек
for i in my_list:
    for j in my_list:
        for k in my_list:

            # вычисляем стороны треугольника
            a = r(i, j)
            b = r(i, k)
            c = r(j, k)

            # вводим проверку, чтобы точки не повторялись
            if a == b or b == c or a == c:
                continue

            p = a + b + c
            # если найденный периметр меньше минимального, то:
            if p < min_p:
                min_p = p
                min_1 = i
                min_2 = j
                min_3 = k

print("Периметр треугольника: ", min_p)
print("Точки :", min_1, min_2, min_3)
